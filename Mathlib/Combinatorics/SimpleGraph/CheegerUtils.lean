import Mathlib.Analysis.InnerProductSpace.Spectrum
import Mathlib.LinearAlgebra.Matrix.Symmetric
import Mathlib.LinearAlgebra.Matrix.Spectrum

open BigOperators

section

open Matrix

variable {E : Type*} [Fintype E] [DecidableEq E]

variable {A : Matrix E E ‚Ñù} (hA : A.IsSymm) (hH : A.IsHermitian)

theorem IsSymm_toEuclidean_of_IsSymm (hA : A.IsSymm) : LinearMap.IsSymmetric (toEuclideanLin A) :=
  sorry

theorem hn : FiniteDimensional.finrank ‚Ñù (E ‚Üí ‚Ñù) = Fintype.card E := by
  rw [FiniteDimensional.finrank_fintype_fun_eq_card]

/-
noncomputable def symm_matrix_eigenvalues_sorted (i : Fin (Fintype.card E)) : ‚Ñù :=
  LinearMap.IsSymmetric.eigenvalues_sorted (IsSymm_toEuclidean_of_IsSymm A hA) hn i
-/

noncomputable def symm_matrix_eigenvalues_sorted (i : Fin (Fintype.card E)) : ‚Ñù :=
  (Matrix.IsHermitian.eigenvalues‚ÇÄ hH ‚àò Tuple.sort (Matrix.IsHermitian.eigenvalues‚ÇÄ hH)) i

theorem symm_matrix_eigenvalues_sorted_is_eig (i : Fin (Fintype.card E)) :
    Module.End.HasEigenvalue (Matrix.toLin' A) (symm_matrix_eigenvalues_sorted hA i) := by
  sorry

end

section

open LinearMap.IsSymmetric

variable {ùïú : Type*} [RCLike ùïú]

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ùïú E] [FiniteDimensional ùïú E]

local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú E _ x y

variable {T : E ‚Üí‚Çó[ùïú] E} (hT : T.IsSymmetric)

variable (hT : T.IsSymmetric) {n : ‚Ñï} (hn : FiniteDimensional.finrank ùïú E = n)

noncomputable def eigenvalues' (i : Fin n) : ‚Ñù :=
  (eigenvalues hT hn ‚àò Tuple.sort (eigenvalues hT hn)) i

noncomputable def eigenvectorBasis' (i : Fin n) : E :=
  eigenvectorBasis hT hn (Tuple.sort (eigenvalues hT hn) i)

/- ‚ü™T v, v‚ü´ = ‚àë·µ¢ Œª·µ¢ v·µ¢¬≤ -/
theorem applyInnerSelf_eq_sum (v : E) : ‚ü™T v, v‚ü´ =
    ‚àë i : Fin n, (eigenvalues hT hn i) * ‚Üë(‚Äñ(eigenvectorBasis hT hn).repr v i‚Äñ ^ 2) := by
  rw [‚Üê OrthonormalBasis.sum_repr (eigenvectorBasis hT hn) (T v)]
  conv_lhs => arg 2; rw [‚Üê OrthonormalBasis.sum_repr (eigenvectorBasis hT hn) v]
  rw [Orthonormal.inner_sum]
  ¬∑ simp only [eigenvectorBasis_apply_self_apply]
    simp only [map_mul, RCLike.conj_ofReal, RCLike.ofReal_sum, RCLike.ofReal_mul, RCLike.ofReal_pow]
    conv_lhs => arg 2; intro i; rw [mul_assoc, RCLike.conj_mul]
  ¬∑ apply OrthonormalBasis.orthonormal

variable (h0 : 0 < n)

theorem iInfRayleigh_eq_sum : (‚®Ö v : { v : E // v ‚â† 0 }, RCLike.re ‚ü™T v, v‚ü´ / ‚Äñ(v : E)‚Äñ ^ 2 : ‚Ñù) =
  (‚®Ö x : { x : EuclideanSpace ùïú (Fin n) // x ‚â† 0 },
    (‚àë i : Fin n, (eigenvalues hT hn i) * ‚Üë(‚Äñx.1 i‚Äñ ^ 2)) / ‚Äñx.1‚Äñ ^ 2) := by
  apply Equiv.iInf_congr (Equiv.subtypeEquiv ((eigenvectorBasis hT hn).repr).toEquiv (_))
  ¬∑ intro v
    simp only [ne_eq, LinearEquiv.coe_toEquiv, LinearIsometryEquiv.coe_toLinearEquiv,
      AddEquivClass.map_eq_zero_iff, forall_const, Equiv.subtypeEquiv_apply]
    rw [_root_.applyInnerSelf_eq_sum hT hn v, RCLike.ofReal_re, LinearIsometryEquiv.norm_map]
  ¬∑ intro v
    simp only [ne_eq, LinearEquiv.coe_toEquiv, LinearIsometryEquiv.coe_toLinearEquiv,
      AddEquivClass.map_eq_zero_iff]

theorem firstEigenvalue_eq_iInfRayleigh : _root_.eigenvalues' hT hn ‚ü®0, h0‚ü© =
    (‚®Ö v : { v : E // v ‚â† 0 }, RCLike.re ‚ü™T v, v‚ü´ / ‚Äñ(v : E)‚Äñ ^ 2 : ‚Ñù) := by
  rw [_root_.iInfRayleigh_eq_sum hT hn]
  conv_rhs => arg 1; intro x; rw [‚Üê Equiv.sum_comp (Tuple.sort (eigenvalues hT hn)) _]
  apply le_antisymm
  ¬∑ sorry -- apply le_ciInf
  ¬∑ sorry -- apply ciInf_le

----------------------------------------------------------------------------------------------------

#check (ùïú ‚àô (_root_.eigenvectorBasis' hT hn ‚ü®0, h0‚ü©))·óÆ
#check (eigenvectorBasis hT hn).repr _
#check (eigenvectorBasis hT hn).repr.symm _

variable {m : ‚Ñï} (hm : m ‚â§ n)
/-
noncomputable def my_equiv (i : Fin n) :
(ùïú ‚àô (eigenvectorBasis hT hn i))·óÆ ‚âÉ EuclideanSpace ùïú (Fin (n-1)) :=
  { toFun := (eigenvectorBasis hT hn).repr, -- remove i-th component
    invFun := fun x => ‚ü®(eigenvectorBasis hT hn).repr.symm x, by sorry‚ü©, -- at x add 0 at i-th
    left_inv := sorry,
    right_inv := sorry }
-/

-- REMINDER: working with eigenspaces is probably not what we want.

variable (i : Fin n)

#check hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i)
#check T.restrict (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i))
#check Module.End.eigenspace_restrict_le_eigenspace T (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i)) (hT.eigenvalues hn i)

noncomputable def T_rest :=
  T.restrict (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i))

/- WRONG. This only holds if the mulitplicity of the i-th eigenvaluee is one -/
theorem rank_orth :
    FiniteDimensional.finrank ùïú (Module.End.eigenspace T (eigenvalues hT hn i))·óÆ = n - 1 := by
  sorry -- Submodule.finrank_add_finrank_orthogonal

#check ((hT.restrict_invariant (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i))).eigenvectorBasis (_root_.rank_orth hT hn i)).repr

/- Equivalence between orthogonal complement of eigenspace of eigenvalue of symmetric linear map and
‚Ñù^(n-1) -/
noncomputable def the_equiv :=
  (((hT.restrict_invariant (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i))).eigenvectorBasis (_root_.rank_orth hT hn i)).repr).toEquiv

/- Eigenvalues of T restricted to the orthogonal complement of the i-th eigenspace -/
noncomputable def T_rest_eigenvalues :=
  (hT.restrict_invariant (hT.invariant_orthogonalComplement_eigenspace (hT.eigenvalues hn i))).eigenvalues (_root_.rank_orth hT hn i)

theorem name_later :
  (‚®Ö v : { v : (Module.End.eigenspace T ‚Üë(eigenvalues hT hn i))·óÆ // v ‚â† 0 }, RCLike.re ‚ü™T v, v‚ü´ / ‚Äñ(v : E)‚Äñ ^ 2 : ‚Ñù) =
  (‚®Ö x : { x : EuclideanSpace ùïú (Fin (n-1)) // x ‚â† 0 },
    (‚àë j : Fin (n-1), (_root_.T_rest_eigenvalues hT hn i j) * ‚Üë(‚Äñx.1 j‚Äñ ^ 2)) / ‚Äñx.1‚Äñ ^ 2) := by
  apply Equiv.iInf_congr (Equiv.subtypeEquiv (_root_.the_equiv hT hn i) (_))
  ¬∑ intro v
    sorry
  ¬∑ intro v
    simp only [ne_eq, _root_.the_equiv, LinearEquiv.coe_toEquiv, LinearIsometryEquiv.coe_toLinearEquiv,
      AddEquivClass.map_eq_zero_iff]

-- Could also directly use LinearMap.IsSymmetric.hasEigenvalue_iInf_of_finiteDimensional

----------------------------------------------------------------------------------------------------
end

-- The assumptions are not the ones of the mediant inequality
theorem mediant_left (a b c d : ‚Ñù) (hc : 0 < c) (hd : 0 < d) (h : a / c ‚â§ b / d) :
    (a + b) / (c + d) ‚â§ b / d := by
  rw [div_le_div_iff (a := a + b) (b := c + d) (c := b) (d := d) (add_pos hc hd) hd]
  rw [add_mul, mul_add, add_le_add_iff_right]
  rw [div_le_div_iff hc hd] at h
  exact h

theorem mediant_right (a b c d : ‚Ñù) (hc : 0 < c) (hd : 0 < d) (h : a / c ‚â§ b / d) :
    a / c ‚â§ (a + b) / (c + d) := by
  rw [div_le_div_iff (a := a) (b := c) (c := a + b) (d := c + d) hc (add_pos hc hd)]
  rw [add_mul, mul_add, add_le_add_iff_left]
  rw [div_le_div_iff hc hd] at h
  exact h

theorem min_le_mediant (a b c d : ‚Ñù) (hc : 0 < c) (hd : 0 < d) :
    min (a / c) (b / d) ‚â§ (a + b) / (c + d) := by
  by_cases h : a / c ‚â§ b / d
  ¬∑ rw [min_eq_left h]
    exact mediant_right a b c d hc hd h
  ¬∑ push_neg at h
    apply le_of_lt at h
    rw [min_eq_right h]
    rw [add_comm a b, add_comm c d]
    apply mediant_right b a d c hd hc h
