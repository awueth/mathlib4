import Mathlib.Combinatorics.SimpleGraph.LapMatrix
import Mathlib.LinearAlgebra.Eigenspace.Basic
import Mathlib.Algebra.Function.Indicator
import Mathlib.Analysis.NormedSpace.Star.Matrix
import Mathlib.Data.Fin.Tuple.Sort
import Mathlib.Analysis.InnerProductSpace.CourantFischer
import Mathlib.Data.FinEnum


open BigOperators Finset Matrix

variable {V : Type*} [Fintype V] [Nonempty V] [DecidableEq V]
variable (G : SimpleGraph V) [DecidableRel G.Adj]

section preliminaries

def volume (s : Finset V) : ‚Ñï := ‚àë v in s, G.degree v

/-
def edge_boundary (s : Set V) : Set (V √ó V) := {(u, v) | (u ‚àà s) ‚àß v ‚àâ s ‚àß G.Adj u v}

def edge_boundary_v2 (s : Set V) : Set (SimpleGraph.edgeSet G) := Sym2.mk '' (edge_boundary G s)
-/

def cut (s : Finset V) : ‚Ñï := ‚àë u in s, ‚àë v in s·∂ú, (if G.Adj u v then 1 else 0)

noncomputable def conductance (s : Finset V) : NNReal := cut G s / min (volume G s) (volume G s·∂ú)

theorem universe_powerSet_nonempty : (Finset.powerset (Finset.univ : Finset V)).Nonempty := by
  apply Finset.powerset_nonempty

noncomputable def minConductance : NNReal := (Finset.powerset (Finset.univ : Finset V)).inf'
  (universe_powerSet_nonempty) (conductance G)

noncomputable def eigenvalues_finset :
  Finset (Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix)) := Finset.univ

noncomputable def eigenvalues_pos :=
  Set.toFinset {x : Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix) | x > (0 : ‚Ñù)}

noncomputable instance : LinearOrder (Module.End.Eigenvalues (toLin' G.normalLapMatrix)) := by
  rw [Module.End.Eigenvalues]
  infer_instance

/- Since G is connected, the kernel is one dimensional and there is a positive eigenvalue.
G being a nontrivial graph would suffice however. -/
noncomputable def gap (hc : G.Connected) : Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix)
  := (eigenvalues_pos G).min' (sorry)

/- Why can the tuple be evaluated at -1? Why no proof of nonemptyness? -/
noncomputable def gap' : ‚Ñù :=
  symm_matrix_eigenvalues_sorted G.normalLapMatrix G.isSymm_normalLapMatrix 1

noncomputable def normalLapMatrixCLM := (Matrix.toEuclideanCLM (ùïú := ‚Ñù) G.normalLapMatrix)

end preliminaries

----------------------------------------------------------------------------------------------------

section easy_inequality

/- For a set s with minimal conductance, R(g) ‚â§ 2 h_G -/
noncomputable def g_low (s : Finset V) : WithLp 2 (V ‚Üí ‚Ñù) := (WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <|
  (Set.indicator s fun v => Real.sqrt (G.degree v) * (volume G univ : ‚Ñù)) -
  (fun v => Real.sqrt (G.degree v) * (volume G s : ‚Ñù))

/- g_low ‚üÇ D^(1/2) 1 -/
theorem g_low_orthogonal (s : Finset V) :
    ‚ü™(WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <| fun v ‚Ü¶ Real.sqrt (G.degree v), g_low G s‚ü´_‚Ñù = 0 := by
  rw [g_low, WithLp.equiv_symm_sub, inner_sub_right]
  have h1 : ‚ü™(WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm fun v ‚Ü¶ Real.sqrt ‚Üë(SimpleGraph.degree G v),
      (WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm
        (Set.indicator ‚Üës fun v ‚Ü¶ Real.sqrt ‚Üë(SimpleGraph.degree G v) * ‚Üë(volume G univ))‚ü´_‚Ñù =
      volume G s * (volume G univ) := by
    simp [Set.indicator, Set.indicator_apply, volume, sum_mul, ‚Üê mul_assoc]
  have h2 : ‚ü™(WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm fun v ‚Ü¶ Real.sqrt ‚Üë(SimpleGraph.degree G v),
      (WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm fun v ‚Ü¶ Real.sqrt ‚Üë(SimpleGraph.degree G v) * ‚Üë(volume G s)‚ü´_‚Ñù =
      volume G s * (volume G univ) := by
    simp [‚Üê mul_assoc, ‚Üê sum_mul, volume, mul_comm]
  rw [h1, h2, sub_self]

/- Orthogonal complement of D^(1/2) * 1 -/
noncomputable def sqrt_deg_perp :=
  (‚Ñù ‚àô ((WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <| fun v ‚Ü¶ Real.sqrt (G.degree v)))·óÆ

/- Œª = inf R(g) over g ‚üÇ D^(1/2) 1. Follows from Courant fischer. Uses the fact Œª = Œª‚ÇÅ which
is true since G is connected. -/
theorem gap_eq_inf_rayleigh (hc : G.Connected) :
    gap G hc  = sInf (ContinuousLinearMap.rayleighQuotient (normalLapMatrixCLM G) '' (sqrt_deg_perp G)) := by
  sorry

/- Œª ‚â§ R(g) -/
theorem gap_le_rayleigh (s : Finset V) (hs : conductance G s = minConductance G) (hc : G.Connected) :
  gap G hc ‚â§ ContinuousLinearMap.rayleighQuotient (normalLapMatrixCLM G) (g_low G s) := by
  rw [gap_eq_inf_rayleigh]
  apply csInf_le
  ¬∑ simp [BddBelow, Set.nonempty_def]
    use 0 -- 0 is a lower bound of the rayleigh quotient. Theorem for definite matrices?
    simp [lowerBounds]
    intro f hf
    rw [ContinuousLinearMap.rayleighQuotient, ContinuousLinearMap.reApplyInnerSelf, IsROrC.re_to_real]
    sorry
  ¬∑ apply Set.mem_image_of_mem -- g ‚üÇ D^(1/2) 1
    rw [sqrt_deg_perp, SetLike.mem_coe, Submodule.mem_orthogonal_singleton_iff_inner_right, g_low_orthogonal]

theorem reApplyInnerSelf_matrix (A : Matrix V V ‚Ñù) (x : V ‚Üí ‚Ñù) : ContinuousLinearMap.reApplyInnerSelf
    (Matrix.toEuclideanCLM (ùïú := ‚Ñù) A) ((WithLp.equiv 2 ((i : V) ‚Üí (fun _ ‚Ü¶ ‚Ñù) i)).symm x) = x ‚¨ù·µ• A *·µ• x := by
  simp [ContinuousLinearMap.reApplyInnerSelf, Matrix.toEuclideanCLM_piLp_equiv_symm A x,
    dotProduct, mul_comm]

theorem xLx (x : V ‚Üí ‚Ñù) : x ‚¨ù·µ• G.normalLapMatrix *·µ• x = (‚àë i : V, ‚àë j : V,
    if G.Adj i j then (x i / Real.sqrt (G.degree i) - x j / Real.sqrt (G.degree j))^2 else 0) / 2 := by
  rw [SimpleGraph.normalLapMatrix]
  sorry

theorem gLg (s : Finset V) : ContinuousLinearMap.reApplyInnerSelf (normalLapMatrixCLM G) (g_low G s) =
    cut G s * (volume G s)^2 := by
  rw [normalLapMatrixCLM, g_low, reApplyInnerSelf_matrix, xLx]
  simp
  sorry

/- R(g) ‚â§ 2 * h -/
theorem rayleigh_le_minConductance (s : Finset V) (hs : conductance G s = minConductance G) :
  ContinuousLinearMap.rayleighQuotient (normalLapMatrixCLM G) (g_low G s) ‚â§ 2 * (minConductance G) := by
  rw [ContinuousLinearMap.rayleighQuotient, normalLapMatrixCLM, g_low, reApplyInnerSelf_matrix,
    xLx, ‚Üê g_low]
  sorry

theorem cheeger_ineq_easy (hc : G.Connected) : gap G hc ‚â§ 2 * (minConductance G : ‚Ñù) := by
  obtain ‚ü®s, _, h‚ü© := Finset.exists_mem_eq_inf' universe_powerSet_nonempty (conductance G)
  rw [‚Üê minConductance] at h
  apply LE.le.trans (gap_le_rayleigh G s (Eq.symm h) hc) (rayleigh_le_minConductance G s (Eq.symm h))

end easy_inequality

----------------------------------------------------------------------------------------------------

section hard_inequality

variable [FinEnum V]

def vertex_tuple : Fin (FinEnum.card V) ‚Üí V := (@FinEnum.equiv V).invFun

noncomputable def vertex_tuple_sorted (f : V ‚Üí ‚Ñù) : Fin (FinEnum.card V) ‚Üí V :=
  vertex_tuple ‚àò Tuple.sort (f ‚àò vertex_tuple)

noncomputable def sweep (f : V ‚Üí ‚Ñù) (i : Fin (FinEnum.card V)) :=
  ((vertex_tuple_sorted f) '' {j : Fin (FinEnum.card V) | j < i}).toFinset

noncomputable def min_sweep_conductance (f : V ‚Üí ‚Ñù) : NNReal :=
  {sweep f i | i : Fin (FinEnum.card V)}.toFinset.inf' (sorry) (conductance G)

/- h_G ‚â§ Œ±_G -/
theorem my_ineq1 (f : V ‚Üí ‚Ñù) : minConductance G ‚â§ (min_sweep_conductance G f) := by
  simp [minConductance, min_sweep_conductance]
  intro s _
  use s

/- Œ±¬≤ / 2 ‚â§ Œª, long chain of inequalities -/
theorem my_ineq2 (f : V ‚Üí ‚Ñù) (hc : G.Connected)
  (hf : Module.End.HasEigenvector (Matrix.toLin' G.normalLapMatrix) (gap G hc) f) :
  (min_sweep_conductance G f : ‚Ñù)^2 / 2 ‚â§ gap G hc := sorry

/- h_G¬≤/2 ‚â§ Œ±¬≤/2 ‚â§ Œª -/
theorem cheeger_ineq_hard (hc : G.Connected) : (minConductance G : ‚Ñù)^2 / 2 ‚â§ gap G hc := by
  obtain ‚ü®f, hf‚ü© := Module.End.HasEigenvalue.exists_hasEigenvector (gap G hc).2
  have h : minConductance G^2 / 2 ‚â§ (min_sweep_conductance G f)^2 / 2 := by
    simp [NNReal.le_div_iff_mul_le]
    rw [‚Üê NNReal.coe_le_coe]
    apply sq_le_sq' -- Theorem for NNReal?
    ¬∑ apply sub_nonneg.1
      rw [sub_neg_eq_add]
      apply add_nonneg
      ¬∑ simp only [NNReal.val_eq_coe, NNReal.zero_le_coe]
      ¬∑ simp only [NNReal.val_eq_coe, NNReal.zero_le_coe]
    ¬∑ exact my_ineq1 G f
  calc
    (minConductance G)^2 / 2 ‚â§ (min_sweep_conductance G f : ‚Ñù)^2 / 2 := h
    _ ‚â§ ‚Üë(gap G hc) := by exact my_ineq2 G f hc hf
