import Mathlib.Combinatorics.SimpleGraph.LapMatrix
import Mathlib.LinearAlgebra.Eigenspace.Basic
import Mathlib.Algebra.Function.Indicator
import Mathlib.Analysis.NormedSpace.Star.Matrix
import Mathlib.Data.Fin.Tuple.Sort
import Mathlib.Analysis.InnerProductSpace.CourantFischer
import Mathlib.Data.FinEnum
import Mathlib.Data.Matrix.Basic


open BigOperators Finset Matrix

variable {V : Type*} [Fintype V] [Nonempty V] [DecidableEq V] (hV : 1 < Fintype.card V )
variable (G : SimpleGraph V) [DecidableRel G.Adj] (hd : ‚àÄ v : V, 0 < G.degree v)

section preliminaries

def volume (s : Finset V) : ‚Ñï := ‚àë v in s, G.degree v

/-
def edge_boundary (s : Set V) : Set (V √ó V) := {(u, v) | (u ‚àà s) ‚àß v ‚àâ s ‚àß G.Adj u v}

def edge_boundary_v2 (s : Set V) : Set (SimpleGraph.edgeSet G) := Sym2.mk '' (edge_boundary G s)
-/

def cut (s : Finset V) : ‚Ñï := ‚àë u in s, ‚àë v in s·∂ú, (if G.Adj u v then 1 else 0)

noncomputable def conductance (s : Finset V) : NNReal := cut G s / min (volume G s) (volume G s·∂ú)

theorem universe_powerSet_nonempty : (Finset.powerset (Finset.univ : Finset V)).Nonempty := by
  apply Finset.powerset_nonempty

noncomputable def minConductance : NNReal := (Finset.powerset (Finset.univ : Finset V)).inf'
  (universe_powerSet_nonempty) (conductance G)

noncomputable def eigenvalues_finset :
  Finset (Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix)) := Finset.univ

noncomputable def eigenvalues_pos :=
  Set.toFinset {x : Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix) | x > (0 : ‚Ñù)}

noncomputable instance : LinearOrder (Module.End.Eigenvalues (toLin' G.normalLapMatrix)) := by
  rw [Module.End.Eigenvalues]
  infer_instance

/-
theorem eigenvalues_pos_Nonempty : (eigenvalues_pos G).Nonempty := by
  simp [Finset.Nonempty, eigenvalues_pos]
  simp only [Module.End.Eigenvalues._eq_1]
  obtain ‚ü®v, t, ht, hv, h‚ü© := Matrix.IsHermitian.exists_eigenvector_of_ne_zero (A := G.normalLapMatrix) (G.isSymm_normalLapMatrix) (sorry)
  use ‚ü®t, sorry‚ü©
  sorry
-/

/- Since G is connected, the kernel is one dimensional and there is a positive eigenvalue.
G being a nontrivial graph would suffice however.
noncomputable def gap (hc : G.Connected) : Module.End.Eigenvalues (Matrix.toLin' G.normalLapMatrix)
  := (eigenvalues_pos G).min' (sorry)
-/

/- Why can the tuple be evaluated at -1? Why no proof of nonemptyness? -/
noncomputable def gap : ‚Ñù :=
  symm_matrix_eigenvalues_sorted G.isSymm_normalLapMatrix ‚ü®1, hV‚ü©

theorem gap_is_eig :
    Module.End.HasEigenvalue (Matrix.toLin' G.normalLapMatrix) (gap hV G) := by
  rw [gap]
  apply (symm_matrix_eigenvalues_sorted_is_eig G.isSymm_normalLapMatrix ‚ü®1, _‚ü©)

noncomputable def normalLapMatrixCLM := (Matrix.toEuclideanCLM (ùïú := ‚Ñù) G.normalLapMatrix)

end preliminaries

----------------------------------------------------------------------------------------------------

theorem matrixReApplyInnerSelf (A : Matrix V V ‚Ñù) (x : WithLp 2 (V ‚Üí ‚Ñù)) :
    (Matrix.toEuclideanCLM (ùïú := ‚Ñù) A).reApplyInnerSelf x =
    x ‚¨ù·µ• A *·µ• x := by
  rw [ContinuousLinearMap.reApplyInnerSelf, EuclideanSpace.inner_eq_star_dotProduct,
    piLp_equiv_toEuclideanCLM, toLin'_apply, star_trivial, IsROrC.re_to_real, dotProduct_comm]
  rfl


theorem matrixRayleighQuotient (A : Matrix V V ‚Ñù) (x : WithLp 2 (V ‚Üí ‚Ñù)) :
    (Matrix.toEuclideanCLM (ùïú := ‚Ñù) A).rayleighQuotient x =
    x ‚¨ù·µ• A *·µ• x / ‚àë i : V, x i ^ 2 := by
  simp_rw [ContinuousLinearMap.rayleighQuotient, matrixReApplyInnerSelf, PiLp.norm_sq_eq_of_L2,
    Real.norm_eq_abs, sq_abs]

theorem matrixreApplyInnerSelf' (A : Matrix V V ‚Ñù) (x : V ‚Üí ‚Ñù) :
    (Matrix.toEuclideanCLM (ùïú := ‚Ñù) A).reApplyInnerSelf ((WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm x) =
    x ‚¨ù·µ• A *·µ• x := by
  rw [matrixReApplyInnerSelf]
  rfl

theorem matrixRayleighQuotient' (A : Matrix V V ‚Ñù) (x : V ‚Üí ‚Ñù) :
    (Matrix.toEuclideanCLM (ùïú := ‚Ñù) A).rayleighQuotient ((WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm x) =
    x ‚¨ù·µ• A *·µ• x / ‚àë i : V, x i ^ 2 := by
  rw [matrixRayleighQuotient]
  rfl
/-
theorem xLx (x : V ‚Üí ‚Ñù) : x ‚¨ù·µ• G.normalLapMatrix *·µ• x = (‚àë i : V, ‚àë j : V,
    if G.Adj i j then (x i / Real.sqrt (G.degree i) - x j / Real.sqrt (G.degree j))^2 else 0) / 2 := by
  rw [SimpleGraph.normalLapMatrix]
  sorry
-/

theorem dotProduct_mulVec_normalLapMatrix (x : V ‚Üí ‚Ñù) : x ‚¨ù·µ• G.normalLapMatrix  *·µ• x
    = ((diagonal (Real.sqrt ‚àò (G.degree ¬∑)))‚Åª¬π *·µ• x) ‚¨ù·µ• G.lapMatrix ‚Ñù *·µ• ((diagonal (Real.sqrt ‚àò (G.degree ¬∑)))‚Åª¬π *·µ• x) := by
  rw [SimpleGraph.normalLapMatrix, mul_assoc, mulVec_mulVec, ‚Üê mulVec_mulVec, dotProduct_mulVec,
    ‚Üê mulVec_transpose, transpose_nonsing_inv, diagonal_transpose]

theorem dotProduct_mulVec_lapMatrix (x : V ‚Üí ‚Ñù) : (diagonal (Real.sqrt ‚àò (G.degree ¬∑)) *·µ• x) ‚¨ù·µ• G.normalLapMatrix  *·µ• (diagonal (Real.sqrt ‚àò (G.degree ¬∑)) *·µ• x)
    = x ‚¨ù·µ• G.lapMatrix ‚Ñù *·µ• x := by
  rw [dotProduct_mulVec_normalLapMatrix, mulVec_mulVec, Matrix.nonsing_inv_mul, one_mulVec]
  simp only [IsUnit, det_diagonal, Function.comp_apply, Units.exists_iff_ne_zero]
  refine prod_ne_zero_iff.mpr ?h.a
  intro v _
  simp only [ne_eq, Nat.cast_nonneg, Real.sqrt_eq_zero, Nat.cast_eq_zero]
  exact Nat.pos_iff_ne_zero.mp (hd v)

----------------------------------------------------------------------------------------------------

section easy_inequality

noncomputable def g_aux (s : Finset V) : V ‚Üí ‚Ñù :=
  (volume G univ : V ‚Üí ‚Ñù) * (Set.indicator s 1) - (volume G s : V ‚Üí ‚Ñù)

noncomputable def D_sqrt :=  diagonal (Real.sqrt ‚àò (G.degree ¬∑))

/- For a set s with minimal conductance, R(g) ‚â§ 2 h_G -/
noncomputable def g_low (s : Finset V) : WithLp 2 (V ‚Üí ‚Ñù) := (WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <|
  D_sqrt G *·µ• (g_aux G s)

theorem g_low_apply (s : Finset V) (v : V) : g_low G s v =
    (if v ‚àà s then Real.sqrt (G.degree v) * (volume G univ : ‚Ñù) else 0) - (Real.sqrt (G.degree v) * (volume G s : ‚Ñù)) := by
  simp [g_low, g_aux, D_sqrt, Pi.coe_nat, WithLp.equiv_symm_pi_apply, mulVec, dotProduct_sub,
    diagonal_dotProduct, Function.comp_apply, Pi.mul_apply, Set.indicator_apply, mem_coe,
    Pi.one_apply, mul_ite, mul_one, mul_zero]

/- g_low ‚üÇ D^(1/2) 1 -/
theorem g_low_orthogonal (s : Finset V) :
    ‚ü™(WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <| fun v ‚Ü¶ Real.sqrt (G.degree v), g_low G s‚ü´_‚Ñù = 0 := by
  simp [g_low_apply, finsum_congr, mul_sub, ‚Üê mul_assoc, ‚Üê sum_mul, volume, mul_comm]


/- Orthogonal complement of D^(1/2) * 1 -/
noncomputable def sqrt_deg_perp :=
  (‚Ñù ‚àô ((WithLp.equiv 2 (V ‚Üí ‚Ñù)).symm <| fun v ‚Ü¶ Real.sqrt (G.degree v)))·óÆ

/- Œª = inf R(g) over g ‚üÇ D^(1/2) 1. Follows from Courant fischer. Uses the fact Œª = Œª‚ÇÅ which
is true since G is connected. -/
theorem gap_eq_inf_rayleigh :
    gap hV G  = sInf ((normalLapMatrixCLM G).rayleighQuotient '' (sqrt_deg_perp G)) := by
  rw [sInf_image']
  apply le_antisymm
  ¬∑ sorry
  ¬∑ sorry

/- Œª ‚â§ R(g) -/
theorem gap_le_rayleigh (s : Finset V) (hs : conductance G s = minConductance G) :
  gap hV G ‚â§ (normalLapMatrixCLM G).rayleighQuotient (g_low G s) := by
  rw [gap_eq_inf_rayleigh hV G]
  apply csInf_le
  ¬∑ simp [BddBelow, Set.nonempty_def]
    use 0 -- 0 is a lower bound of the rayleigh quotient. Theorem for definite matrices?
    simp [lowerBounds]
    intro f _
    rw [normalLapMatrixCLM, ContinuousLinearMap.rayleighQuotient, matrixReApplyInnerSelf]
    apply div_nonneg
    ¬∑ apply Matrix.PosSemidef.re_dotProduct_nonneg (ùïú := ‚Ñù) G.posSemidef_normalLapMatrix f
    ¬∑ apply sq_nonneg
  ¬∑ apply Set.mem_image_of_mem -- g ‚üÇ D^(1/2) 1
    rw [sqrt_deg_perp, SetLike.mem_coe, Submodule.mem_orthogonal_singleton_iff_inner_right, g_low_orthogonal]

example : ((volume G univ) : ‚Ñù) / ‚Üë(volume G univ) ‚â§ 1 := by apply div_self_le_one

/- R(g) ‚â§ 2 * h -/ -- Remember this theorem: max_mul_min
theorem rayleigh_le_minConductance (s : Finset V) (hs : conductance G s = minConductance G) :
    (normalLapMatrixCLM G).rayleighQuotient (g_low G s) ‚â§ 2 * (minConductance G) := by
  rw [normalLapMatrixCLM, g_low, matrixRayleighQuotient']
  have h1 : D_sqrt G *·µ• g_aux G s ‚¨ù·µ• SimpleGraph.normalLapMatrix G *·µ• D_sqrt G *·µ• g_aux G s =
      cut G s * (volume G univ)^2 := by
    rw [D_sqrt, dotProduct_mulVec_lapMatrix G hd, g_aux]
    set L := G.lapMatrix ‚Ñù
    rw [mulVec_sub, sub_dotProduct]
    sorry
  have h2 : ‚àë i : V, (D_sqrt G *·µ• g_aux G s) i ^ (2 : ‚Ñï) =
      (volume G univ) * (volume G s) * (volume G s·∂ú) := by
    simp [D_sqrt, mulVec_diagonal, mul_pow, g_aux, sub_sq]
    have hi : (v : V) ‚Üí (Set.indicator s (1 : V ‚Üí ‚Ñù) v ^ 2 = Set.indicator s (1 : V ‚Üí ‚Ñù) v) := by
      simp [sq, Set.indicator_apply]
    simp [hi]
    set d := G.degree with hd
    set œá := Set.indicator s (1 : V ‚Üí ‚Ñù) with hœá
    set VG := volume G univ with hVG
    set VS := volume G s with hVS
    set VSC := volume G s·∂ú with hVSC
    calc
      _ = ‚àë x : V, ‚Üë(d x) * ((‚ÜëVG ^ 2 - 2 * ‚ÜëVG * ‚ÜëVS) * œá x + ‚ÜëVS ^ 2) := by sorry
      _ = ‚àë x : V, (‚Üë(d x) * (‚ÜëVG ^ 2 - 2 * ‚ÜëVG * ‚ÜëVS) * œá x + ‚Üë(d x) * ‚ÜëVS ^ 2) := by sorry
      _ = ‚àë x : V, ‚Üë(d x) * (‚ÜëVG ^ 2 - 2 * ‚ÜëVG * ‚ÜëVS) * œá x + ‚àë x : V, ‚Üë(d x) * ‚ÜëVS ^ 2 := by sorry
      _ = (‚àë x : s, ‚Üë(d x)) * (‚ÜëVG ^ 2 - 2 * ‚ÜëVG * ‚ÜëVS) + (‚àë x : V, ‚Üë(d x)) * ‚ÜëVS ^ 2 := by sorry
      _ = ‚ÜëVG * ‚ÜëVS * (‚ÜëVG - ‚ÜëVS) := by sorry
      _ = ‚ÜëVG * ‚ÜëVS * ‚ÜëVSC := sorry
  rw [h1, h2]
  have h3 : ((volume G univ) : ‚Ñù) / ‚Üë(volume G univ) ‚â§ 1 := by apply div_self_le_one
  calc
    _ = ‚Üë(cut G s) * ‚Üë(volume G univ) * (‚Üë(volume G univ) / ‚Üë(volume G univ)) / (‚Üë(volume G s) * ‚Üë(volume G s·∂ú)) := by ring
    _ ‚â§ ‚Üë(cut G s) * ‚Üë(volume G univ) * (1 : ‚Ñù) / (‚Üë(volume G s) * ‚Üë(volume G s·∂ú)) := by sorry -- simp [div_self_le_one ((volume G univ) : ‚Ñù)]
    _ = ‚Üë(cut G s) * ‚Üë(volume G univ) / (‚Üë(volume G s) * ‚Üë(volume G s·∂ú)) := by simp only [mul_one]
    _ ‚â§ ‚Üë(cut G s) * ‚Üë(volume G univ) / (max ‚Üë(volume G s) ‚Üë(volume G s·∂ú) * min ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) := by rw [max_mul_min]
    _ = ‚Üë(cut G s) * (‚Üë(volume G univ) / max ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) / (min ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) := by ring
    _ ‚â§ ‚Üë(cut G s) * (2 * max ‚Üë(volume G s) ‚Üë(volume G s·∂ú) / max ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) / (min ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) := by sorry
    _ ‚â§ ‚Üë(cut G s) * 2 / (min ‚Üë(volume G s) ‚Üë(volume G s·∂ú)) := by sorry
    _ = 2 * (‚Üë(cut G s) / (min ‚Üë(volume G s) ‚Üë(volume G s·∂ú))) := by ring
    _ = 2 * (conductance G s) := by simp [conductance]
    _ ‚â§ 2 * (minConductance G) := by rw [hs];


theorem cheeger_ineq_easy : gap hV G ‚â§ 2 * (minConductance G : ‚Ñù) := by
    obtain ‚ü®s, _, h‚ü© := Finset.exists_mem_eq_inf' universe_powerSet_nonempty (conductance G)
    rw [‚Üê minConductance] at h
    apply LE.le.trans (gap_le_rayleigh hV G s (Eq.symm h)) (rayleigh_le_minConductance G s (Eq.symm h))

end easy_inequality

----------------------------------------------------------------------------------------------------

section hard_inequality

variable [FinEnum V]

def vertex_tuple : Fin (FinEnum.card V) ‚Üí V := (@FinEnum.equiv V).invFun

noncomputable def vertex_tuple_sorted (f : V ‚Üí ‚Ñù) : Fin (FinEnum.card V) ‚Üí V :=
  vertex_tuple ‚àò Tuple.sort (f ‚àò vertex_tuple)

noncomputable def sweep (f : V ‚Üí ‚Ñù) (i : Fin (FinEnum.card V)) :=
  ((vertex_tuple_sorted f) '' {j : Fin (FinEnum.card V) | j < i}).toFinset

noncomputable def min_sweep_conductance (f : V ‚Üí ‚Ñù) : NNReal :=
  {sweep f i | i : Fin (FinEnum.card V)}.toFinset.inf' (sorry) (conductance G)

/- h_G ‚â§ Œ±_G -/
theorem my_ineq1 (f : V ‚Üí ‚Ñù) : minConductance G ‚â§ (min_sweep_conductance G f) := by
  simp [minConductance, min_sweep_conductance]
  intro s _
  use s

/- Œ±¬≤ / 2 ‚â§ Œª, long chain of inequalities -/
theorem my_ineq2 {f : V ‚Üí ‚Ñù}
  (hf : Module.End.HasEigenvector (Matrix.toLin' G.normalLapMatrix) (gap hV G) f) :
  (min_sweep_conductance G f : ‚Ñù)^2 / 2 ‚â§ gap hV G := sorry

/- h_G¬≤/2 ‚â§ Œ±¬≤/2 ‚â§ Œª -/
theorem cheeger_ineq_hard : (minConductance G : ‚Ñù)^2 / 2 ‚â§ gap hV G := by
  obtain ‚ü®f, hf‚ü© := Module.End.HasEigenvalue.exists_hasEigenvector (gap_is_eig hV G) --(gap G hc).2
  have h : minConductance G^2 / 2 ‚â§ (min_sweep_conductance G f)^2 / 2 := by
    simp [NNReal.le_div_iff_mul_le]
    rw [‚Üê NNReal.coe_le_coe]
    apply sq_le_sq' -- Theorem for NNReal?
    ¬∑ apply sub_nonneg.1
      rw [sub_neg_eq_add]
      apply add_nonneg
      ¬∑ simp only [NNReal.val_eq_coe, NNReal.zero_le_coe]
      ¬∑ simp only [NNReal.val_eq_coe, NNReal.zero_le_coe]
    ¬∑ exact my_ineq1 G f
  calc
    (minConductance G)^2 / 2 ‚â§ (min_sweep_conductance G f : ‚Ñù)^2 / 2 := h
    _ ‚â§ ‚Üë(gap hV G) := by exact my_ineq2 hV G hf
